
ECS50-WI23-Lab1
ECS-50 Lab 1 :: Basements and Byters

I’m sure that you’ve heard of the role-playing game “Dungeons and Dragons” or DnD. In DnD various dice of differing number of sides are used to add a random element to gameplay. You may not have heard of the slightly more underground variant, popular with computer science students, called “Basements and Byters” or BnB. In BnB dice are also used to add a random element to gameplay, however, all dice have binary digits on their face and the number of sides for any die is always a power of two.

You have been asked to help design and implement a digital dice device for use with BnB. Your job is to write the software for the PIC12F508 microprocessor.

Outputs: GP0, GP1, GP2, GP5 Represents bits 0-3 of the output (GP5= bit 3). This four-bit output gives you a display range of the values 0-15.

Inputs:

    GP3 when pressed starts the roll. When released, the roll is stopped, and the result is displayed on the output LEDs.

    GP4 selects the mode. When clear, the output will represent a role of 2d8z. That is, two eight-sided die rolls (with zero) will be summed and displayed. When set, the output will represent 1d16z. That is, one sixteen-sided die roll (with zero) will be displayed.

Notes:

    The mode bit is ignored once the die roll has been started. It is only read prior to the start of the next die roll.

    While the dice are rolling, the LEDs should display changing values. However, they may not display the actual value of the current dice rolls.

    While the dice are rolling, what is displayed should look as attractive and interesting as possible. No specific algorithm is required other than it complies with the previous note. Use your creativity.

    The mode should not change until a roll is complete.

    An 8-sided die with zero has the numbers 0 through 7 printed on its eight sides.

    A 16-sided die with zero has the numbers 0 through 15 printed on its sixteen sides.

    You must implement a circular buffer that saves the last 16 rolls in locations 10h to 1fx. A circular buffer is implemented similarly to a stack except that the buffer pointer wraps around. Think about what happens when you add 1 to an 8-bit value but then mask off the upper 4 bits? As a reminder, we saw this technique in the square function example.

 

How to get started:

Start by writing up pseudocode for the overall project. You will want to use techniques from the examples discussed in class to do things such as wait for a key to be pressed or a key to be released. You will want to create as many subroutines as is reasonable. Think about how different parts of the project can be put into a subroutine. You must return a literal from a subroutine so you will need to think about how you are going to communicate between subroutines. At this level, global variables are fine. Let me say, however, you will want to leave yourself time to refine your code at the end of the project. Eliminate any unnecessary variables before you submit.

Random Numbers

I asked you to look at the other advanced example on your own. Unfortunately, it’s more complicated than it needs to be, but the idea is still reasonable. A linear feedback shift register can be used to create a sequence of pseudorandom numbers. They are far from truly random, but they’ll work well enough for our project. You may use the following simplified code that generates a maximally long 8-bit sequence.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Implements an 8-bit linear feedback shift register that can be used to generate a
// pseudo random binary number sequence. The output sequence can be viewed in
// the register lfsr.

$RESULT_W 0
$RESULT_F 1

@lfsr 0x0A

// Load seed value into lfsr
movlw 0x79 // any non-zero value will work
movwf lfsr

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// main loop begins
//

:loop
call lfsr_galois
goto loop

:lfsr_galois

// First clear the carry so that we know that it is zero. Now, shift the lfsr right
// putting the LSB in carry and copying the lfsr into the working register for more
// processing

bcf STATUS,C
rrf lfsr, RESULT_W

// If the carry (LSB) is set we want to
// xor the lfsr with our xor taps 8,6,5,4 (0,2,3,4)
//
btfsc STATUS, C
xorlw 10111000b
movwf lfsr // save the new lfsr
retlw 1

Putting it Together

The above generator will give you a repeating 8-bit sequence of numbers that are repeating, the 8-bit sequence is not particularly random. You can expect better randomness by taking a smaller subset, say three or four bits, from anywhere within the bit stream. This will be sufficient for this project. This will give you practice shifting/rotating and masking numbers.

This is not meant to be a very challenging project. You are expected to use many of the idioms discussed in the examples as well as the code provided above. The most challenging part will simply be putting the pieces together.

Testing

You will need to demonstrate that the distribution of numbers that are rolled is reasonable. What differences should you expect from the 1d16z to the 2d8z rolls? You will want to include at least one screenshot of the data in your circular buffer after completing at least 16 rolls for each mode in your writeup.

Source Code Documentation

Assembler language must be documented. In my software engineering course, we talk about how documentation can indicate that a project isn’t well written. This really doesn’t hold for assembler. You must tell the reader what is going on. Resis the temptation to repeat what the instructions accomplish. We know what xor does, we don’t know why it’s being used.

Writeup

You must complete a brief write up of this project. A successful writeup for a project such as this will be about five pages, give or take, including code and not including the title page. If your screenshots are big, it may be longer. Try to make everything look awesome!  You will need to give a brief introduction, a theory of operation, a discussion section that includes any testing, a brief conclusion, and your source code included as an appendix. Usually, students overthink this. Don’t do that. Instead, start your project early, and make notes as you go.

Your writeup must include screenshots showing your 16 rolls in the simulator, as stated in the bold part above. This is so we can see that your code ran in the simulator. We want to see the values in the data memory.

Submission

In addition to the pdf writeup you must also upload your code with a .asm extension.  While it's unlikely that the TAs will run your code, if necessary, they will and they should not have to extract it from your pdf file.  So, you must both upload your writeup as a pdf that includes your source code so that it's easy to read, AND, you must upload a separate source file with a .asm extension. 

Changes

This document is subject to being updated at any time for clarity. You are always responsible for the latest edition of the project prompt.

Document History

V003:  Clarified submission details 
V002:  Fixed misuse of GP3 as output pin. 
V001:  Initial Release

